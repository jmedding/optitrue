<h1>First comparison</h1>
Blue = original, Red = shifted, Orange = shifted & transformed
 </br>
<canvas id="base"    width="200" height="200"></canvas>
<br>
<h1>Camera moves even further</h1>
Blue = original, Red = shifted, Green= last transform, Orange = fully transformed <br>
<canvas id="second" width="200" height="200"></canvas>
<br>

The fully transformed points demonstrate the solution of applying the last 
transform to the new next image, then finding corners and then finding matches 
to the base image. This assumes that the camera's POV shifts are continuous from one 
frame to the next and that by applying the last known transform, we can remove the 
long term drift and thus reduce the time needed to find matches because the features
should be quite close to each other.

<script>
  var w = 200;
  var h = 200;


  var module = require("web/static/js/stabilizer");
  var base = document.getElementById('base');
  var second = document.getElementById('second');
  var baseCtx = base.getContext('2d');
  var secondCtx = second.getContext('2d');

  var t1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);

  var points = pointset(4);
  var shiftedPoints = pointset(4);
  var shifted2Points = pointset(4);
  var unshifted2Points = pointset(4);

  points[0].data[0] = 20;
  points[0].data[1] = 20;
  points[0].data[2] = 1;

  points[1].data[0] = 20;
  points[1].data[1] = 150;
  points[1].data[2] = 1;

  points[2].data[0] = 150;
  points[2].data[1] = 150;
  points[2].data[2] = 1;

  points[3].data[0] = 150;
  points[3].data[1] = 20;
  points[3].data[2] = 1;

  plotPoints(points, baseCtx);

  t1.data[8] = 1    //Always 1
  t1.data[0] = 1.2  //horizontal scaling
  t1.data[4] = 1.0  //vertical scaling
  t1.data[5] = 9.0  //vertical moving
  t1.data[1] = 0.2  //vertical skewing
  t1.data[2] = -5   //horiozontal moving

  applyAffineTransform(points, t1, shiftedPoints);
  plotPoints(shiftedPoints, baseCtx, 'red');

  var ta = module.affine2d(buildMatches(points, shiftedPoints));
  var a = ta.data.slice(0,6); //affine coefficients
  baseCtx.transform(a[0], a[3], a[1], a[4], a[2], a[5]);
  plotPoints(shiftedPoints, baseCtx, 'orange');

//  Ok now we see that the CSS transform has properly aligned the first offset

// Lets ofset the points even further, simulating the the camera has move a bit
// from the last position

  t1.data[0] = 1.0  //horizontal scaling
  t1.data[4] = 1.0  //vertical scaling
  t1.data[5] = 2.0  //vertical moving
  t1.data[1] = 0.1 //vertical skewing
  t1.data[2] = -6.0   //horiozontal moving

  applyAffineTransform(shiftedPoints, t1, shifted2Points);

  plotPoints(points, secondCtx);
  plotPoints(shifted2Points, secondCtx, 'red');
  secondCtx.transform(a[0], a[3], a[1], a[4], a[2], a[5]);
  plotPoints(shifted2Points, secondCtx, 'green');

  takeCssTransform(secondCtx, t1);

  applyAffineTransform(points, t1, unshifted2Points);

  // Uncomment the next two lines to verify that the unshifted points
  // are correctly calculated (the shoudl be land in the same positoin as the p_s2 points)
  //secondCtx.resetTransform();
  //plotPoints(unshifted2Points, secondCtx, 'orange');

  var ta = module.affine2d(buildMatches(points, unshifted2Points));
  var a = ta.data.slice(0,6); //affine coefficients
  baseCtx.transform(a[0], a[3], a[1], a[4], a[2], a[5]);
  plotPoints(shiftedPoints, secondCtx, 'orange');

  console.log("t1", t1.data);
  console.log("p1", points[0]);
  console.log("p1s", shiftedPoints[0]);
  console.log("transform", a);
  console.log("unshifted2 Points", unshifted2Points);

  function plotPoints(points, ctx, color = 'blue') {
    for (let p of points){
      plotPoint(p, ctx, color);
    }
  };

  function plotPoint(p, ctx, color = 'blue') {
    point = [p.data[0], p.data[1]];
    var h = color == 'orange' ? -10 : 10;
    module.drawV(ctx, point, h, 3, color);
  }

  // create a match object for points a and b
  function match (a, b) {
    return {keypoint1: [a.data[0], a.data[1]], keypoint2: [b.data[0], b.data[1]]}
  }

  function buildMatches (original, current) {
    // original and current are same length arrays of points
    var matches = [];
    for (var i = original.length - 1; i >= 0; i--) {
      matches[i] = match(original[i], current[i]);
    }
    console.log("matches", matches);
    return matches;
  }

  function takeCssTransform(ctx, jsFeatMatrix) {
    var cssTransform = ctx.mozCurrentTransform;

    console.log("cssTransform", cssTransform);
    jsFeatMatrix[0] = cssTransform.a;
    jsFeatMatrix[1] = cssTransform.c;
    jsFeatMatrix[2] = cssTransform.e;
    jsFeatMatrix[3] = cssTransform.b;
    jsFeatMatrix[4] = cssTransform.d;
    jsFeatMatrix[5] = cssTransform.f;
  }

  function pointset (n) {
    var set = [];
    for (var i = n - 1; i >= 0; i--) {
      set.push( new jsfeat.matrix_t(1, 3, jsfeat.S32_t | jsfeat.C1_t) );
    }
    return set;
  }

  function applyAffineTransform(orig, transformMatrix, result) {
    for (var i = orig.length - 1; i >= 0; i--) {
      jsfeat.matmath.multiply(result[i], transformMatrix, orig[i]);
    }
  }

</script>
